#!/usr/bin/env python

import tkinter as tk
import pandas as pd
from datetime import date
from csv import writer
import os
import sys
from os.path import abspath
from inspect import getsourcefile
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
import IMX_Utils as utils


def generate_invoice(company, jobsite, start_date, end_date):
    try:
        list_of_date = utils.dates_list(start_date, end_date)
        ticket_data = pd.read_csv('../Data/Raw/Tickets.csv')
        jobsite_data = ticket_data.loc[(ticket_data['company_name'] == company) & (ticket_data['jobsite']==jobsite)]
        by_date = jobsite_data.loc[jobsite_data['date'].isin(list_of_date)]
        invoice_df = by_date[['ticket_number', 'jobsite', 'date', 'tare_weight', 'gross_weight',
                              'net_weight', 'material_type', 'rate']]
        invoice_df['Total'] = invoice_df['rate'] * invoice_df['net_weight']
        new_col_names = ['Ticket Num', 'Job Site', 'Date', 'Tare Weight', 'Gross Weight',
                         'Net Weight', 'Material Type', 'Rate', 'Total']
        # new invoice is here as the invoice is not yet added to the table.
        # Hence, the table entry will generate the same invoice number
        new_invoice_num = next_invoice_num()
        file_name = f'Invoice_{new_invoice_num}_{company}_{jobsite}_{start_date}_{end_date}.csv'
        file_path = f'../Data/Reports_To_Process/{file_name}'
        invoice_df.columns = new_col_names
        invoice_df.to_csv(file_path, index=False)
        # Save invoice data to invoice table
        invoice_to_table(company, file_path)
        return True
    except Exception as error:
        print(error)
        return False

def invoice_to_table(company_name, invoice_file):
    """Will save invoice data to invoice table.
    Args:
        invoice_file(str): path to the invoice generated by generate_invoice
    Returns:
        Boolean: True if successful
                False if not successful
    """
    print('in invoice_to_table')
    invoice_data = pd.read_csv(invoice_file)
    total_weight = invoice_data['Net Weight'].sum()
    total_revenue = invoice_data['Total'].sum()
    job_site = invoice_data['Job Site'].unique()[0]
    invoice_num = next_invoice_num()
    sent_status = True
    sent_date = date.today()
    paid_status = False
    data_to_save = [invoice_num, company_name, job_site,
                    total_weight, total_revenue, sent_status, sent_date, paid_status]
    save_to_invoice(data_to_save)
    #print(f'Total Weight: {total_weight}')
    #print(f'Total Revenue: {total_revenue}')
    #print(f'Job Site: {job_site}')
    #print(f'Invoice Number: {invoice_num}')
    #print(sent_date)


def next_invoice_num():
    print('in next invoice num')
    path = '/home/gsandoval/Documents/IMX/IMX/Data/Raw/Invoices.csv'
    invoice_data = pd.read_csv(path, index_col=False)
    latest_num = invoice_data['invoice_num'].max()
    new_num = latest_num + 1
    return new_num

def save_to_invoice(data):
    """Will write a row of data to Invoice.csv
    Args:
        data(list): a list of the values to write
    Returns:
        None
        """
    print('in save_to_invoice')
    print(data)
    print(type(data))
    with open('../Data/Raw/Invoices.csv', 'a') as invoice_file:
        writer_object = writer(invoice_file)
        writer_object.writerow(data)


def main():
    invoice_to_table('Big 3',
                     '/home/gsandoval/Documents/IMX/IMX/Data/Reports_To_Process/Invoice_Big Inc_Big 3_2022-01-03_2022-01-07.csv')



if __name__ == '__main__':
    print('something')
    main()


